var searchIndex = JSON.parse('{\
"spandex":{"doc":"This crate contains all the tools we need to generate nice …","t":[13,13,4,13,13,13,13,13,13,13,6,11,11,5,0,11,11,0,11,11,11,11,11,11,11,0,0,11,11,11,11,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,0,0,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,3,3,11,11,11,11,11,11,11,5,11,11,11,11,11,12,11,11,12,12,12,11,5,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,0,11,11,11,11,11,0,11,0,11,11,11,11,3,12,12,11,11,11,11,11,12,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,11,11,11,11,0,11,12,11,12,11,11,0,12,11,11,11,11,17,17,17,17,17,17,17,17,17,17,3,11,11,11,0,11,11,0,11,0,12,11,0,0,11,11,11,11,11,0,5,5,3,11,11,11,11,11,11,11,12,11,11,11,12,11,12,11,11,12,12,12,12,11,11,11,13,4,13,3,13,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,8,3,3,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,5,0,0,0,5,5,3,11,11,5,5,5,5,5,5,11,5,11,5,12,12,11,11,11,12,5,5,5,3,3,6,0,12,11,11,11,11,11,11,12,0,11,11,0,11,11,11,11,11,11,12,11,12,5,11,11,11,11,11,11,11,0,0,12,4,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,4,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,5,5,5,5,13,3,4,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12],"n":["CannotReadCurrentDir","DexError","Error","FontNotFound","FontWithoutName","FreetypeError","HyphenationLoadError","IoError","NoConfigFile","PrintpdfError","Result","borrow","borrow_mut","build","document","fmt","fmt","fonts","from","from","from","from","from","from","into","layout","parser","to_string","try_from","try_into","type_id","0","0","0","0","0","0","0","Document","Window","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","configuration","counters","from","from","height","inner","inner_mut","into","into","new","new_line","new_page","render","save","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","write_content","write_line","write_paragraph","x","y","Config","PtVisitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","deserialize_pt","expecting","fmt","from","from","init","input","into","into","left_margin","page_height","page_width","serialize","serialize_pt","text_height","text_width","title","to_owned","top_margin","try_from","try_from","try_into","try_into","type_id","type_id","visit_f32","visit_f64","visit_i16","visit_i32","visit_i64","visit_i8","visit_u16","visit_u32","visit_u64","visit_u8","with_title","Counters","borrow","borrow_mut","clone","clone_into","counter","counters","default","fmt","from","increment","into","new","to_owned","to_string","try_from","try_into","type_id","Font","borrow","borrow_mut","char_width","configuration","fmt","from","from_bytes","from_file","into","manager","printpdf","styles","text_width","try_from","try_into","type_id","FontConfig","bold","bold_italic","borrow","borrow_mut","for_style","from","into","italic","regular","try_from","try_into","type_id","FontManager","add_font","borrow","borrow_mut","config","default_config","from","get","init","into","try_from","try_into","type_id","FontStyle","bold","bold","borrow","borrow_mut","clone","clone_into","fmt","from","into","italic","italic","regular","to_owned","try_from","try_into","type_id","unbold","unitalic","Glyph","borrow","borrow_mut","clone","clone_into","constants","fmt","font","from","glyph","into","new","paragraphs","scale","to_owned","try_from","try_into","type_id","ADJACENT_LOOSE_TIGHT_PENALTY","DASH_GLYPH","DEFAULT_LINE_LENGTH","IDEAL_SPACING","MAX_ADJUSTMENT_RATIO","MAX_COST","MIN_ADJUSTMENT_RATIO","MIN_COST","PLUS_INFINITY","SPACE_WIDTH","Paragraph","borrow","borrow_mut","default","engine","fmt","from","graph","into","items","items","iter","justification","ligatures","new","push","try_from","try_into","type_id","utils","algorithm","positionate_items","Node","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fitness","fmt","from","hash","index","into","line","partial_cmp","to_owned","total_demerits","total_shrink","total_stretch","total_width","try_from","try_into","type_id","BoundingBox","Content","Glue","Item","Penalty","PositionedItem","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","content","fmt","fmt","fmt","from","from","from","from_glyph","glue","glyph","horizontal_offset","index","into","into","into","line","penalty","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","width","width","0","flagged","shrinkability","stretchability","value","Justifier","LatexJustifier","NaiveJustifier","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","justify","justify","justify","try_from","try_from","try_into","try_into","type_id","type_id","ligature","ast","linebreak","paragraphs","itemize_ast","itemize_ast_aux","Measures","borrow","borrow_mut","compute_adjustment_ratio","compute_adjustment_ratios_with_breakpoints","compute_demerits","compute_fitness","create_node_for_feasible_breakpoint","find_legal_breakpoints","from","get_measures_to_next_box","into","is_forced_break","shrinkability","stretchability","try_from","try_into","type_id","width","add_word_to_paragraph","get_line_length","glue_from_context","Parsed","Position","Span","ast","ast","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","column","combinators","eq","equivalent","error","fmt","fmt","from","from","into","into","line","ne","offset","position","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","utils","warning","warnings","Ast","Bold","Error","File","InlineMath","Italic","Newline","Paragraph","Text","Title","Warning","borrow","borrow_mut","children","clone","clone_into","eq","equivalent","errors","fmt","fmt","from","into","ne","print_debug","to_owned","to_string","try_from","try_into","type_id","warnings","0","0","0","0","0","0","0","0","1","children","level","error","get_block","parse","parse_any","parse_block_content","parse_bold","parse_comment","parse_content","parse_delimited","parse_group","parse_inline_math","parse_italic","parse_paragraph","parse_single_line","parse_title","parse_title_level","should_stop","warning","EmptyError","ErrorType","Errors","MultipleLinesTitle","UnmatchedDollar","UnmatchedSlash","UnmatchedStar","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","content","detail","eq","eq","equivalent","equivalent","errors","fmt","fmt","fmt","fmt","from","from","from","into","into","into","ne","note","path","position","title","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","compute_column","is_new_line","next_new_line","previous_new_line","replicate","ConsecutiveStars","EmptyWarning","WarningType","Warnings","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","content","detail","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","into","into","into","ne","note","path","position","title","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","warnings"],"q":["spandex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spandex::Error","","","","","","","spandex::document","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spandex::document::configuration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spandex::document::counters","","","","","","","","","","","","","","","","","","spandex::fonts","","","","","","","","","","","","","","","","","spandex::fonts::configuration","","","","","","","","","","","","","spandex::fonts::manager","","","","","","","","","","","","","spandex::fonts::styles","","","","","","","","","","","","","","","","","","","spandex::layout","","","","","","","","","","","","","","","","","","spandex::layout::constants","","","","","","","","","","spandex::layout::paragraphs","","","","","","","","","","","","","","","","","","","","spandex::layout::paragraphs::engine","","spandex::layout::paragraphs::graph","","","","","","","","","","","","","","","","","","","","","","","","spandex::layout::paragraphs::items","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spandex::layout::paragraphs::items::Content","","","","","spandex::layout::paragraphs::justification","","","","","","","","","","","","","","","","","","","","spandex::layout::paragraphs::ligatures","spandex::layout::paragraphs::utils","","","spandex::layout::paragraphs::utils::ast","","spandex::layout::paragraphs::utils::linebreak","","","","","","","","","","","","","","","","","","","spandex::layout::paragraphs::utils::paragraphs","","","spandex::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spandex::parser::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spandex::parser::ast::Ast","","","","","","","","","","","spandex::parser::combinators","","","","","","","","","","","","","","","","","","spandex::parser::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spandex::parser::utils","","","","","spandex::parser::warning","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Cannot read current directory.","Some error occured while parsing a dex file.","The error type of the library.","The specified font was not found.","The specified font has no name or no style.","Error while dealing with freetype.","An error occured while loading an hyphenation dictionnary.","Another io error occured.","No spandex.toml was found.","Error while dealing with printpdf.","The result type of the library.","","","Compiles a spandex project.","This module allows to create beautiful documents.","","","This module contains everything that helps us dealing with …","","","","","","","","Logic for laying out the various pieces that make up a …","This crate contains the parser for spandex.","","","","","","","","","","","","This struct contains the pdf document.","The window that is the part of the page on which we’re …","","","","","","","This module defines the basic configuration of a document …","Logic for recursive counters in a document for titles and …","","","The height of the window, in pt.","Returns a reference to the inner pdf document.","Returns a mutable reference to the inner pdf document.","","","Creates a new pdf document from its name and its size in …","Goes to the beginning of the next line.","Creates a new page and append it to the document.","Renders an AST to the document.","Saves the document into a file.","","","","","","","","The width of the window, in pt.","Writes content on the document.","Writes a line in the document.","Writes a paragraph on the document.","The x coordinate of the window, in pt.","The y coordinate of the window, in pt.","Holds the configuration of a document, including various …","Visitor for the <code>Pt</code> structure.","","","","","","","","Deserializes a <code>Pt</code> structure.","","","","","Creates a document and a font maanger from the config.","The path to the first file of the spandex content.","","","The left margin of the document.","The height of the page of the document.","The width of the page of the document.","","Serializes a <code>Pt</code> structure.","The text height of the document.","The text width of the document.","The title of the document.","","The top margin of the document.","","","","","","","","","","","","","","","","","Creates a default configuration with a title.","The struct that manages the counters for the document.","","","","","Returns a specific value of a counter.","The counters.","","","","Increases the corresponding counter and returns it if it …","","Creates a new empty counters.","","","","","","A font that contains the printpdf object font needed to …","","","Computes the width of a char of the font at a specified …","Configuration for a <code>Font</code> used to typeset a document.","","","Creates a font from a byte array.","Creates a font from a path to a file.","","Font manager that detects, loads and handles the different …","Returns a reference to the printpdf font.","Different style variants of a <code>Font</code>.","Computes the text width of the font at a specified size.","","","","A font configuration for a document.","The bold font.","The bold italic font.","","","Returns the font corresponding to the style.","","","The italic font.","The regular font.","","","","This struct holds the different fonts.","Adds a new font to the font manager.","","","Creates a font config.","Returns the default configuration for computer modern …","","Returns a reference font if it is present in the font …","Creates a new font manager, with the default fonts.","","","","","A style for a font. It can be bold, italic, both or none.","Adds the bold style to the font.","Whether the bold is activated or not.","","","","","","","","Adds the italic style to the font.","Whether the italic is activated or not.","Creates a new regular font style.","","","","","Removes the bold style from the font.","Removes the italic style from the font.","A glyph with its font style.","","","","","Various constants used for laying out the items of a …","","The font style of the word.","","The content of the word.","","Creates a new word from a string and a font style.","Logic for laying out a paragraph.","The size of the font.","","","","","The additional cost that should be added to a penalty when …","The glyph that represents a char.","The default length of a line if no desired length is …","The ideal spacing between two words.","Maximal adjustment ratio to consider a breakpoint is legal.","The maximal cost of a penalty to count as a legal …","Minimum adjustment ratio to consider a breakpoint is legal.","The minimal cost of a penalty to count as a legal …","An infinite length in points.","The width a whitespace.","Holds a list of items describing a paragraph.","","","","Mathematical logic for typesetting a sequence of words …","","","Structure used in the graph part of the line breaking …","","Various blocks holding information and specifications …","Sequence of items representing the structure of the …","Returns an iterator to the items of the paragraph.","This module contains the trait and implementation of …","This module contains the functions related to ligatures.","Instantiates a new paragraph.","Pushes an item at the end of the paragraph.","","","","Set of utility functions for manipulating ASTs, the line …","Finds the optimal sequence of breakpoints that minimize …","Generates a list of positioned items from a list of items …","Aggregates various measures up to and from a feasible …","","","","","","","","The fitness class of the item represented by the node.","","","","Index of the item represented by the node, within the …","","Line at which the item lives within the paragraph.","","","Accumulated demerits from previous breakpoints.","Total shrinkability from the previous breakpoint to this …","Total stretchability from the previous breakpoint to this …","Total width from the previous breakpoint to this one.","","","","A bounding box refers to something that is meant to be …","Possible available types for an item.","Glue is a blank space which can see its width altered in …","Top abstraction of an item, which is a specification for a …","Penalty is a potential place to end a line and step to …","Holds the information of an item that’s ready to be …","","","","","","","The type of the item.","","","","","","","Creates a box for a particular glyph and font.","Creates some glue.","The glyph that should be layed out within this item.","The horizontal offset of the item.","The index of the item within the list of items that make up","","","","The index of the line on which this item is to be rendered.","Creates a penalty.","","","","","","","","","","The width of the item in scaled units.","The (potentially adjusted) width this item should be …","","Whether or not the penalty is considered as flagged.","How inclined the glue is to shrink from its natural width, …","How inclined the glue is to stretch from its natural …","The “cost” of the penalty.","An algorithm that justifies a paragraph.","The LaTeX style justifier.","A naive justifier, that goes to the next line once a word …","","","","","","","","","Justifies the paragraph passed as parameter.","","","","","","","","","Ligates a string.","Utility functions for manipulating an abstract syntax tree …","Utility functions for the various stages of the line …","Utility functions for manipulating and typesetting a …","Parses an AST into a sequence of items.","Parses an AST into a sequence of items.","Accumulator to hold the three key related measures.","","","Computes the adjusment ratio of a line of items, based on …","Computes the adjustment ratios of all lines given a set of …","Computes the demerits of a line based on its accumulated …","Computes the fitness class of a line based on its …","Handles a feasible breakpoint and adds it to the current …","Finds all the legal breakpoints within a paragraph. A …","","Computes the accumulated measures from the current …","","Checks whether or not a given item encodes a forced …","Measure of the shrinkability accumulated so far.","Measure of the stretchability accumulated so far.","","","","Measure of the width accumulated so far.","Adds a word to a buffer.","Returns the length of the line of given index, from a list …","Returns the glue based on the spatial context of the …","An ast that was successfully parsed.","A position is a span but without the reference to the …","This type will allow us to know where we are while we’re …","This module contains everything related to the ast.","The parsed ast.","","","","","","","The column number of the position.","This module contains all the functions needed for parsing.","","","This module contains everything related to parsing errors.","","","","","","","The line number of the position.","","The offset from the beginning of the string.","Returns the position of a span.","","","","","","","","This module contains some functions that will help us …","This module contains everything related to parse warnings.","The warnings that were produced.","The abstract syntax tree representing the parsed file.","Some bold content.","An error.","Content stored in a specific file.","A math inlinemath.","Some italic content.","An empty line.","A paragraph.","Some text.","A title.","A warning.","","","Returns the children of the ast, if any.","","","","","Returns all the errors contained in the ast.","","","","","","Pretty prints the ast.","","","","","","Returns all the errors contained in the ast.","","","","","","","","","","The content of the title.","The level of the title.","Creates an error.","Gets a block of content.","Parses a whole dex file from a name.","Parses some multiline inline content.","Parses a block of content.","Parses some bold content.","Parses a comment.","Parses a whole dex file.","Parses a delimited element.","Parses some text content.","Parses some math inline math.","Parses some italic content.","Parses a paragraph of text content.","Parses a title on a single line.","Parses a whole title.","Parses the hashes from the level of a title.","Returns true if the character passed as parameter changes …","Creates a warning.","An error that occured during the parsing.","The different types errors that can occur while parsing.","A struct that contains many errors that references a file.","A title is on multiple lines.","A dollar for a inlinemath is unmatched.","A slash for italic content is unmatched.","A star for bold content is unmatched.","","","","","","","","","","","The content that produced the errors.","Returns the detail of the error.","","","","","The errors that were produced.","","","","","","","","","","","","Returns an optional note.","The path to the corresponding file.","The position of the error.","Returns the title of the error.","","","","","","","","","","The type of the error.","","","","Computes the column of a specified byte depending on its …","Returns true if the char at specified byte is a \\\\n.","Finds the next \\\\n char.","Finds the previous \\\\n char.","Replicates a char n times.","Two consecutive stars only seperated by whitespaces.","An warning that occured during the parsing.","The different types of warning that can occur.","A struct that contains many warnings that references a …","","","","","","","","","","","The content that produced the warnings.","Returns the defail of the warning.","","","","","","","","","","","","","","","","Returns a potential note.","The path to the corresponding file.","The position of the warning.","Returns the title of the warning.","","","","","","","","","","The type of the warning.","","","","The warnings produced."],"i":[1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,2,3,4,5,6,7,8,0,0,9,10,9,10,10,10,0,0,9,10,10,9,9,9,10,9,9,9,9,9,10,9,10,9,10,9,10,10,9,9,9,10,10,0,0,11,12,11,12,12,12,12,0,11,11,11,12,12,12,11,12,12,12,12,12,0,12,12,12,12,12,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,0,14,14,14,14,14,0,14,0,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,0,18,18,18,18,18,18,0,18,18,18,18,18,0,0,0,0,0,0,0,0,0,0,0,19,19,19,0,19,19,0,19,0,19,19,0,0,19,19,19,19,19,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,0,21,0,21,0,22,21,23,22,21,23,22,22,21,23,22,21,23,22,22,23,23,23,22,21,23,23,22,22,21,23,22,21,23,22,21,23,22,23,24,25,26,26,25,0,0,0,27,28,27,28,27,28,27,28,29,27,28,27,28,27,28,27,28,0,0,0,0,0,0,0,30,30,0,0,0,0,0,0,30,0,30,0,30,30,30,30,30,30,0,0,0,0,0,0,0,31,32,31,32,31,32,32,32,0,32,32,0,32,31,32,31,32,31,32,32,32,0,32,32,31,32,31,32,31,0,0,31,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,35,36,37,38,39,40,41,39,42,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,43,43,43,43,44,45,43,44,45,43,44,43,44,45,43,43,44,43,44,45,43,44,45,45,43,44,45,43,44,45,44,43,45,44,43,43,44,45,43,44,45,43,44,45,44,43,44,45,0,0,0,0,0,46,0,0,0,46,47,48,46,47,48,46,47,46,47,48,46,46,47,46,47,46,47,48,48,46,47,48,46,47,48,47,46,48,47,46,46,47,48,46,47,48,46,47,48,47,46,47,48,48],"f":[null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["config",3]],["result",6]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[["error",3]],["error",4]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[]],[[["error",4]],["error",4]],[[["errors",3]],["error",4]],[[]],null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["window",3]],[[]],null,null,[[]],[[]],null,[[],["pdfdocumentreference",3]],[[],["pdfdocumentreference",3]],[[]],[[]],[[["window",3],["into",8,["pt"]],["str",15],["pt",3]],["document",3]],[[["pt",3]]],[[]],[[["pt",3],["fontconfig",3],["ast",4]]],[[["asref",8,["path"]],["path",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["pt",3],["str",15],["fontconfig",3]]],[[["pt",3],["font",3]]],[[["standard",3],["pt",3],["fontconfig",3],["ast",4]]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["config",3]],[[]],[[],["result",4]],[[["deserializer",8]],[["result",4,["pt"]],["pt",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[],["cresult",6]],null,[[]],[[]],null,null,null,[[],["result",4]],[[["serializer",8],["pt",3]],["result",4]],null,null,null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[["str",15]],["config",3]],null,[[]],[[]],[[],["counters",3]],[[]],[[["usize",15]],["usize",15]],null,[[],["counters",3]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]],["usize",15]],[[]],[[],["counters",3]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["pt",3],["char",15]],["pt",3]],null,[[["formatter",3]],["result",6]],[[]],[[["library",3],["document",3]],[["result",6,["font"]],["font",3]]],[[["asref",8,["path"]],["library",3],["document",3],["path",3]],[["result",6,["font"]],["font",3]]],[[]],null,[[],["indirectfontref",3]],null,[[["pt",3],["str",15]],["pt",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[["fontstyle",3]],["font",3]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["document",3]],["result",6]],[[]],[[]],[[["str",15]],[["fontconfig",3],["result",6,["fontconfig"]]]],[[],["fontconfig",3]],[[]],[[["str",15]],[["option",4,["font"]],["font",3]]],[[["document",3]],[["fontmanager",3],["result",6,["fontmanager"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["fontstyle",3]],null,[[]],[[]],[[],["fontstyle",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["fontstyle",3]],null,[[],["fontstyle",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["fontstyle",3]],[[],["fontstyle",3]],null,[[]],[[]],[[],["glyph",3]],[[]],null,[[["formatter",3]],["result",6]],null,[[]],null,[[]],[[["pt",3],["char",15],["font",3]],["glyph",3]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["paragraph",3]],null,[[["formatter",3]],["result",6]],[[]],null,[[]],null,null,[[],[["iter",3,["item"]],["item",3]]],null,null,[[],["paragraph",3]],[[["item",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["paragraph",3]],[["vec",3,["usize"]],["usize",15]]],[[],[["vec",3,["vec"]],["vec",3,["positioneditem"]]]],null,[[]],[[]],[[],["node",3]],[[]],[[["node",3]],["ordering",4]],[[["node",3]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[]],[[]],null,[[]],null,[[["node",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["glyph",3]],["item",3]],[[["pt",3]],["item",3]],null,null,null,[[]],[[]],[[]],null,[[["pt",3],["bool",15],["f64",15]],["item",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pt",3],["paragraph",3]],[["vec",3],["vec",3,["vec"]]]],[[["pt",3],["paragraph",3]],[["vec",3],["vec",3,["vec"]]]],[[["pt",3],["paragraph",3]],[["vec",3],["vec",3,["vec"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["str",15]],["string",3]],null,null,null,[[["standard",3],["pt",3],["fontconfig",3],["ast",4]],["paragraph",3]],[[["paragraph",3],["standard",3],["pt",3],["fontconfig",3],["fontstyle",3],["ast",4]]],null,[[]],[[]],[[["pt",3]],["f64",15]],[[],[["vec",3,["f64"]],["f64",15]]],[[["f64",15]],["f64",15]],[[["f64",15]],["i64",15]],[[["usize",15],["item",3],["measures",3],["node",3],["f64",15]],["node",3]],[[["paragraph",3]],[["vec",3,["usize"]],["usize",15]]],[[]],[[["usize",15],["item",3]],["measures",3]],[[]],[[["item",3]],["bool",15]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["vec",3,["glyph"]],["glyph",3],["standard",3],["paragraph",3]]],[[["usize",15]],["pt",3]],[[["option",4,["glyph"]],["pt",3],["glyph",3]],["item",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["position",3]],[[]],null,null,[[["position",3]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["position",3]],["bool",15]],null,[[["span",6]],["position",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],[["option",4,["vec"]],["vec",3]]],[[],["ast",4]],[[]],[[["ast",4]],["bool",15]],[[],["bool",15]],[[],[["emptyerror",3],["vec",3,["emptyerror"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["ast",4]],["bool",15]],[[["formatter",3],["str",15],["bool",15]],["result",6]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["vec",3,["emptywarning"]],["emptywarning",3]]],null,null,null,null,null,null,null,null,null,null,null,[[["errortype",4],["span",6]],["ast",4]],[[["span",6]],[["iresult",6,["span","span"]],["span",6]]],[[["asref",8,["path"]],["path",3]],[["parsed",3],["error",4],["result",4,["parsed","error"]]]],[[["span",6]],[["span",6],["ast",4],["iresult",6,["span","ast"]]]],[[["span",6]],[["span",6],["ast",4],["iresult",6,["span","ast"]]]],[[["span",6]],[["span",6],["ast",4],["iresult",6,["span","ast"]]]],[[["span",6]],[["span",6],["ast",4],["iresult",6,["span","ast"]]]],[[["str",15]],[["iresult",6,["span","vec"]],["vec",3,["ast"]],["span",6]]],[[["span",6]],[["span",6],["ast",4],["iresult",6,["span","ast"]]]],[[["span",6]],[["iresult",6,["span","vec"]],["vec",3,["ast"]],["span",6]]],[[["span",6]],[["span",6],["ast",4],["iresult",6,["span","ast"]]]],[[["span",6]],[["span",6],["ast",4],["iresult",6,["span","ast"]]]],[[["span",6]],[["span",6],["ast",4],["iresult",6,["span","ast"]]]],[[["span",6]],[["iresult",6,["span","vec"]],["vec",3,["ast"]],["span",6]]],[[["span",6]],[["span",6],["ast",4],["iresult",6,["span","ast"]]]],[[["span",6]],[["span",6],["usize",15],["iresult",6,["span","usize"]]]],[[["char",15]],["bool",15]],[[["warningtype",4],["span",6]],["ast",4]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["errortype",4]],[[],["emptyerror",3]],[[]],[[]],null,[[],["str",15]],[[["errortype",4]],["bool",15]],[[["emptyerror",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["emptyerror",3]],["bool",15]],[[],[["str",15],["option",4,["str"]]]],null,null,[[],["str",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["str",15]],["usize",15]],[[["usize",15],["str",15]],["bool",15]],[[["usize",15],["str",15]],["usize",15]],[[["usize",15],["str",15]],["usize",15]],[[["usize",15],["char",15]],["string",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["warningtype",4]],[[],["emptywarning",3]],[[]],[[]],null,[[],["str",15]],[[["warningtype",4]],["bool",15]],[[["emptywarning",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["emptywarning",3]],["bool",15]],[[],[["str",15],["option",4,["str"]]]],null,null,[[],["str",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[4,"Error"],[13,"FreetypeError"],[13,"PrintpdfError"],[13,"FontNotFound"],[13,"FontWithoutName"],[13,"HyphenationLoadError"],[13,"IoError"],[13,"DexError"],[3,"Document"],[3,"Window"],[3,"PtVisitor"],[3,"Config"],[3,"Counters"],[3,"Font"],[3,"FontConfig"],[3,"FontManager"],[3,"FontStyle"],[3,"Glyph"],[3,"Paragraph"],[3,"Node"],[4,"Content"],[3,"Item"],[3,"PositionedItem"],[13,"BoundingBox"],[13,"Penalty"],[13,"Glue"],[3,"NaiveJustifier"],[3,"LatexJustifier"],[8,"Justifier"],[3,"Measures"],[3,"Parsed"],[3,"Position"],[4,"Ast"],[13,"Bold"],[13,"Italic"],[13,"InlineMath"],[13,"Text"],[13,"Paragraph"],[13,"File"],[13,"Error"],[13,"Warning"],[13,"Title"],[4,"ErrorType"],[3,"EmptyError"],[3,"Errors"],[4,"WarningType"],[3,"EmptyWarning"],[3,"Warnings"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};